/*

    - 자료형
       0.undefined(자료없다.)
        1. 숫자형 2.문자열 3.불
         4.배열[]           :(여러개의 자료를 하나의 자료 묶음)
            - 성질 ,상태 , 필드 = 현재 데이터의 상태
          5.함수(){}        :코드 집합 
            - 행위, 이벤트, 메소드 = 
          6.객체{}

     함수
        - 코드의 집합을 나타내는 자료형
        - 코드 묶음.
        - 용어
            - 함수호출 : 함수사용할때. f(x)
            - 매개변수 : 함수호출할때 괄호 내부에 여러가지 *자료를 넣을때 = 인수 
            - 리턴값   : 함수호출해서 최종적으로 나오는 결과 = 반환
       
        - 종류
            1.매개변수0리턴0
                function 함수( x, y ){ z = x+y; return z;}
            2. 매개변수o리턴x
                function 함수( x, y){  x+y ;}
            3. 매개변수x리턴O
                function 함수( ){  return 3+3 ;}
            4. 매개변수x리턴O
                function 함수( ){ }
       
            - 함수 사용하면 좋은점.
            1. 반복되는 코드를 한번에 정의 하고 필요에 따라 호출해서 반복 작업을 피 할수 있다.[코드 양 줄일수 있다.]
            2. 긴 프로그램을 기능별로 나눠 여러 함수로 나눠 작성하면 모듈화[조각/쪼개서 단위]로 전체 코드의 가독성[읽고 관리가]이 좋다.
            3. 기능별(함수별)로 수정이 가능하므로 유지보수가 쉽다.

            - 1. 익명함수 : 이름이 없는 함수.

*/

    // - 익명함수를 변수/상수에 넣자.. 그럼 변수/상수 호출시 함수가 실행.

const 함수 = function(){ 
    console.log('함수 내부의 코드입니다..1');
    console.log('함수 내부의 코드입니다..2');
    console.log('함수 내부의 코드입니다..3');
    console.log('함수 내부의 코드입니다..4');
    console.log('');
}



함수(); //함수 호출

함수(); //함수 호출

console.log( typeof 함수);
console.log( 함수 );

//=======================
function 선언함수(){
    console.log('함수 내부의 코드입니다..1');
    console.log('함수 내부의 코드입니다..2');
    console.log('함수 내부의 코드입니다..3');
    console.log('함수 내부의 코드입니다..4');
    console.log('');
}
선언함수();
선언함수();




console.log( typeof 선언함수);
console.log( 선언함수 );






function f(x ){
    return x * x
}

console.log(f(3))



function 오늘스페셜메뉴(금액){
    return '랍스터 음식';
}
오늘스페셜메뉴(50000);


